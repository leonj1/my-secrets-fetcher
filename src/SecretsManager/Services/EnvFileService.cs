using System.Text;
using System.Text.RegularExpressions;
using Microsoft.Extensions.Logging;

namespace SecretsManager.Services
{
    public class EnvFileService : IEnvFileService
    {
        private readonly ISecretsService _secretsService;
        private readonly ILogger<EnvFileService> _logger;
        private static readonly Regex AwsSecretArnRegex = new Regex(
            @"\$\{arn:aws:secretsmanager:[^:]+:[^:]+:secret:[^}]+\}",
            RegexOptions.Compiled | RegexOptions.IgnoreCase
        );

        public EnvFileService(ISecretsService secretsService, ILogger<EnvFileService> logger)
        {
            _secretsService = secretsService;
            _logger = logger;
        }

        public async Task<Dictionary<string, string>?> LoadEnvExampleFileAsync(string filePath = ".env.example")
        {
            try
            {
                if (!File.Exists(filePath))
                {
                    _logger.LogInformation(".env.example file not found at: {FilePath}", filePath);
                    return null;
                }

                var envVars = new Dictionary<string, string>();
                var lines = await File.ReadAllLinesAsync(filePath);

                foreach (var line in lines)
                {
                    // Skip empty lines and comments
                    if (string.IsNullOrWhiteSpace(line) || line.TrimStart().StartsWith("#"))
                        continue;

                    // Parse KEY=VALUE format
                    var equalIndex = line.IndexOf('=');
                    if (equalIndex > 0)
                    {
                        var key = line.Substring(0, equalIndex).Trim();
                        var value = line.Substring(equalIndex + 1).Trim();
                        
                        // Remove surrounding quotes if present
                        if ((value.StartsWith("\"") && value.EndsWith("\"")) || 
                            (value.StartsWith("'") && value.EndsWith("'")))
                        {
                            value = value.Substring(1, value.Length - 2);
                        }

                        envVars[key] = value;
                    }
                }

                _logger.LogInformation("Successfully loaded {Count} variables from .env.example", envVars.Count);
                return envVars;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to load .env.example file from: {FilePath}", filePath);
                return null;
            }
        }

        public async Task<Dictionary<string, string>> ProcessEnvFileSecretsAsync(Dictionary<string, string> envVars)
        {
            var processedVars = new Dictionary<string, string>();
            
            foreach (var (key, value) in envVars)
            {
                if (IsAwsSecretArn(value))
                {
                    try
                    {
                        _logger.LogInformation("Processing secret ARN for key {Key}: {Value}", key, value);
                        
                        // Extract the ARN from the ${...} wrapper
                        var arn = value.Substring(2, value.Length - 3);
                        var secretId = ExtractSecretIdFromArn(arn);
                        
                        if (!string.IsNullOrEmpty(secretId))
                        {
                            var secretValue = await _secretsService.GetSecretValueAsync(secretId);
                            processedVars[key] = secretValue;
                            _logger.LogInformation("Successfully retrieved secret for key {Key}", key);
                        }
                        else
                        {
                            _logger.LogError("Failed to extract secret ID from ARN: {Arn}", arn);
                            processedVars[key] = value; // Keep original value
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "Failed to fetch secret for key {Key}", key);
                        processedVars[key] = value; // Keep original value on error
                    }
                }
                else
                {
                    // Not an ARN, keep the original value
                    processedVars[key] = value;
                }
            }

            return processedVars;
        }

        public async Task WriteEnvFileAsync(Dictionary<string, string> envVars, string filePath = ".env")
        {
            try
            {
                var sb = new StringBuilder();
                
                // Add header comment
                sb.AppendLine("# Generated by SecretsManager");
                sb.AppendLine($"# Generated at: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC");
                sb.AppendLine();

                // Write each environment variable
                foreach (var (key, value) in envVars.OrderBy(kv => kv.Key))
                {
                    // Escape value if it contains special characters
                    var escapedValue = value;
                    if (value.Contains(' ') || value.Contains('=') || value.Contains('\n'))
                    {
                        escapedValue = $"\"{value.Replace("\"", "\\\"")}\"";
                    }
                    
                    sb.AppendLine($"{key}={escapedValue}");
                }

                await File.WriteAllTextAsync(filePath, sb.ToString());
                _logger.LogInformation("Successfully wrote {Count} variables to {FilePath}", envVars.Count, filePath);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to write .env file to: {FilePath}", filePath);
                throw;
            }
        }

        private bool IsAwsSecretArn(string value)
        {
            if (string.IsNullOrWhiteSpace(value))
                return false;

            return AwsSecretArnRegex.IsMatch(value);
        }

        private string ExtractSecretIdFromArn(string arn)
        {
            // ARN format: arn:aws:secretsmanager:region:account:secret:name-suffix
            var parts = arn.Split(':');
            if (parts.Length >= 7)
            {
                // Return the secret name part (everything after "secret:")
                return string.Join(":", parts.Skip(6));
            }

            _logger.LogError("Invalid ARN format: {Arn}", arn);
            return string.Empty;
        }
    }
}